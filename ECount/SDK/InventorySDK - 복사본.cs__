using ECount.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ECount
{
    public class InventorySDK
    {

        //현재 구매 상태에 대한 정보만 가져오기 -> sale 구현시 sale 정보랑 함께 뺀 후에 결과값 반환 필요

        static public Dictionary<ProductModel, int> GetStatus()
        {
            //구매정보 가져오기
            var purchases = PurchaseSDK.GetHistory();
            var sales = SaleSDK.GetHistory();

            //구매정보 반환하기
            return _GetStatus(purchases, sales);
        }

        //날짜 주면 구매 히스토리 반환하기
        static public Dictionary<ProductModel, int> GetStatus(DateTime date)
        {
            var purchases = PurchaseSDK.GetHistory(date);
            var sales = SaleSDK.GetHistory();

            return _GetStatus(purchases, sales);
        }

        //구매 정보 넘겨서 구매 개수 누적하기
        //-> sale 구현시 sale 정보랑 함께 뺀 후에 결과값 반환 필요
        //구매 내역에서 전체 개수 누적합
        static private Dictionary<ProductModel, int> _GetStatus(List<PurchaseHistoryModel> purchases, List<SaleHistoryModel> sales)
        {
            var result = new Dictionary<ProductModel, int>();

            //구매 -> 개수 증가
            foreach (var purchase in purchases)
            {
                if (result.ContainsKey(purchase.Product))
                {
                    result[purchase.Product] += purchase.Quantity;
                }
                else
                {
                    result.Add(purchase.Product, purchase.Quantity);
                }
            }
            List<ProductModel> keyList = new List<ProductModel>(result.Keys);
            foreach (var item in keyList)
            {
                result[item] -= SaleSDK.GetQuantity(item);
            }

            //판매 -> 개수 감소
            //foreach (var sale in sales)
            //{
            //    if (result.ContainsKey(sale.Product))
            //    {
            //        result[sale.Product] -= sale.Quantity;
            //    }
            //    else
            //    {
            //        throw new Exception($"품목이 존재하지 않습니다. {sale.Product}");
            //    }
            //}

            return result;
        }
    }
}
